#!/usr/bin/python

"""
File name  : csccp-solver-cli.py 
Description:
Author     : Alioune Schurz
Lab        : Computational Molecular Design and Detection Lab (CMDD lab)
Institute  : National Taiwan University
"""

import sys,os,pybel
from numpy import *
from optparse import OptionParser
from gamefft.tools import *
import gamefft.npsdb.data_handler as data_handler
import gamefft.solvers.bf_solvers as bf_solvers
import gamefft.solvers.idp_solvers as idp_solvers
import gamefft.solvers.dp_solvers as dp_solvers



def main():
    
    valid_versions  =['bf','dp','idp']
    valid_languages =['py','cc','cu']
    valid_extensions=['txt','html']

    def missing_opt_err_msg(msg,opt,l_opt):
        return msg+" Use %s of %s.\nUse -h or --help for help on the commands" % (opt,l_opt) 

    # Parse arguments from command line * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    parser = OptionParser()
    parser.add_option("-s", "--scaffold", dest="scaffold",help="cIdx file to load", metavar="FILE")
    parser.add_option("-r", "--ranking",action="store", dest="r",default="10",help="number of desired outputs (default 10)")
    parser.add_option("-m", "--mass", action="store", dest="mass",help="mass of the peak to identify")
    parser.add_option("-p", "--ppm",action="store", dest="ppm",default="5",help="resolution of the spectrometer")
    parser.add_option("-d", "--dec",action="store", dest="dec",default="0",help="decimals for the dynamic programming")
    parser.add_option("-o", "--output",dest="output",help="name of the output file. Valid formats: html, txt.", metavar="FILE")
    parser.add_option("-q", "--quiet",action="store_true", dest="quiet", default=False,help="don't print status messages to stdout")
    parser.add_option("-v", "--version",action="store", dest="version",default="idp",help="valid versions: bf,dp,cuda")
    parser.add_option("-l", "--language",action="store", dest="language",default="cc",help="valid languages: python,cpp,cuda")
    parser.add_option("-c", "--config",action="store", dest="config",help="index of the configuration")
    parser.add_option("-i", "--info", action="store_true", dest="info",help="get information on the scaffold")
    parser.add_option("-t", "--timer", action="store_true", dest="timer_on",default=False,help="turns on the timer")   
    parser.add_option("-b", "--debug", action="store_true", dest="debug",help="")
    parser.add_option("-f", "--forcecompile", action="store_true", dest="forcecompile",help="force to recompile c++ and cuda binaries")

    options, args = parser.parse_args()
    maxruntime=float("infinity")
    run_options={"verbose":not options.quiet,"debug":options.debug,"forcecompile":options.forcecompile,"maxruntime":maxruntime,"dec":int(options.dec)}
    timer_on=options.timer_on
    timer=Timer()
    
    s=None
    if not options.scaffold:
        parser.error(missing_opt_err_msg("missing input file.","-s","--scaffold"))
    else:
        s=data_handler.Scaffold()
        try:
            s.load_data(options.scaffold,run_options)
        except data_handler.ScaffoldNullPopularity as e:
            print e
            exit()
        except data_handler.ScaffoldCorrupted as e:
            print e 
            exit()
        except IOError as e:
            print "Error: the scaffold file \"%s\" does not exist\nTry something like \"-s data/s0000000008\"" % e.filename if e.errno==2 else e
            exit()

    if options.info:
        print s
        if options.config:
            config_idx=int(options.config)
            print "** Configuration %d number of compounds" % (config_idx)
            print [len(s.sidechainlist[y]) for y in s.configurations[config_idx]]
        exit()

    if not options.mass:
        parser.error(missing_opt_err_msg("missing mass peak.","-m","--mass"))
    if not options.version in valid_versions:
    	parser.error("unknow version '"+str(options.version)+"'. Should in %s" % str(valid_versions)) 
    if not options.language in valid_languages:
        parser.error("unknow version '"+str(options.language)+"'. Should in %s" % str(valid_languages)) 
    if not options.config:
        parser.error(missing_opt_err_msg("missing configuration index. Use -i or --info for information on the scaffold","-c","--config")) 
    
    config_idx=int(options.config)
    if config_idx>=len(s.configurations):
        print "Error: wrong configuration Idx %d. Use -i or --info for information on the scaffold" % config_idx
        exit()

    R=int(options.r)
    mass_peak=float(options.mass)
    ppm=int(options.ppm)
    dec=int(options.dec)

    fileExtension=""
    if options.output:
        outputfile, fileExtension = os.path.splitext(options.output)
        fileExtension=fileExtension.replace(".","")
        if not fileExtension in valid_extensions:
            parser.error(fileExtension+" is not a valid output format. Should in %s" % str(valid_extensions)) 

    # --

    try:
        #generate CSCCP
        csccp=s.generate_csccp(R,mass_peak,ppm,config_idx)
        result=dict()
        if run_options["verbose"]:
            print "------------------csccp info----------------\n",csccp,"\n------------------end------------------------"
        # Run the programs * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        tmp=[]
        solver=None
        if options.version=="bf":
            if options.language in ["py","cc"]:
                print "warning: no c++ version for brute force, using python instead"
                solver=bf_solvers.BfSolverCpuPy()
            else:
                print "The language '",options.language,"' is not implemented yet for version '",options.version,"'"
                exit() 

        elif options.version=="idp":
            if options.language=="py":
                solver=idp_solvers.IDPSolverCpuPyOpt()
            elif options.language=="cc":
                solver=idp_solvers.IDPSolverCpuCcOpt()
            else:
                print "The language '",options.language,"' is not implemented yet for version '",options.version,"'"
                exit()
                
        elif options.version=="dp":
            if options.language=="py":
                solver=dp_solvers.DPSolverCpuPyOpt()
            elif options.language=="cc":
                solver=dp_solvers.DPSolverCpuCcOpt()
            elif options.language=="cu":
                from gamefft.solvers.cuda.dp_solvers_cuda import DPSolverGpuCudaOptCompressed,DPKernelGpuCudaOptCompressed
                solver=DPSolverGpuCudaOptCompressed()
            else:
                print "The language '",options.language,"' is not implemented yet for version '",options.version,"'"
                exit()
        else:
            print "The version '",options.version,"' is not implemented."

        timer.start()
        tmp=solver.run(csccp,run_options)
        timer.stop()
        # Generate the results * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
        result=csccp.generate_output_molecules(tmp,run_options)      

    except Timer.TimeoutException as e:
        print "Error: time out. The program took more than specified maximum runtime: %.f s" % e.time
    except data_handler.TrivialCSCCP :
        result=csccp.trivial_solution()
    except data_handler.BadCSCCP as e:
        print e


    # Display results  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    if run_options["verbose"]:
        count=1
        if result:
            print "\tProbability\tWeight\t\tSmile"
            print "____________________________________________________________________________________"
        else:
            print "No solution found."
        for item in result:
            smile=str(item['mol']).replace("_","")
            smile=smile.strip()
            print "%d.\t%e\t%e\t" %(count,item['probability'],item['weight']),smile
            count+=1

    # Save results  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
    
    # save in txt file
    if fileExtension=="txt":
        txtf=open(options.output,"w")
        txtf.write("\tProbability\tWeight\t\tSmile\n")
        txtf.write("____________________________________________________________________________________\n")
        count=1
        for item in result:
            smile=str(item['mol']).replace("_","")
            smile=smile.strip()
            txtf.write("%d.\t%e\t%e\t%s\n" %(count,item['probability'],item['weight'],smile))
            count+=1
        if VERBOSE:
            print "results saved in file ",options.output
        txtf.close()
    # save in html
    if fileExtension=="html":
        htmlf=open(options.output,"w")
        htmlf.write("<HTML><HEAD><LINK href=\".result-style.css\" rel=\"stylesheet\" type=\"text/css\"></HEAD><BODY>")

        htmlf.write("<h3>OPTIONS:</h3> -s %s -m %s --ppm %s --config %s -v %s -l %s --dec %s\n" % (options.scaffold,options.mass,options.ppm,options.config,options.version,options.language,options.dec))
        htmlf.write("<h3>CSCCP INFO:</h3>\n")
        info=str(csccp).split("\n")
        for line in info:
             htmlf.write("%s<BR/>\n" % line)
        htmlf.write("<h3>SOLUTIONS:</h3>\n")   
        htmlf.write("<TABLE border cellspacing=\"0\" class=\"result-table\">\n")
        htmlf.write("<TR><TH>Rank</TH><TH>Molecule</TH><TH>Probability</TH><TH>Weight</TH></TR>\n")
        count=1
        for item in result:
            smile=str(item['mol']).replace("_","")
            smile=smile.strip()
            image_folder=outputfile+"_data/"
            if not os.path.exists(image_folder):
                os.mkdir(image_folder)
            image_name=image_folder+os.path.basename(outputfile)+str(count)+".png"
            image_src=os.path.basename(outputfile)+"_data/"+os.path.basename(outputfile)+str(count)+".png"
            htmlf.write("<TR><TD>%d.</TD><TD align=\"center\"><img src=\"%s\" class=\"molimage\"></img><BR/><SPAN font size=\"4\" style=\"color: gray;\">%s</SPAN></TD><TD style=\"color: blue;\">%e</TD><TD style=\"color:red;\">%f</TD></TR>\n" %(count,image_src,smile,item['probability'],item['weight']))
            #generate the image 
            mymol = pybel.readstring("smi",smile)
            mymol.draw(filename=image_name,show=False,update=False)
            # --
            count+=1
        
        htmlf.write("</TABLE>\n")
        htmlf.write("</BODY></HTML>\n")
        if VERBOSE:
            print "results saved in file ",options.output

        htmlf.close()
    # --
    if timer_on:
        print "Finished in: ",str(timer.elapsedTime())," s"

if __name__=="__main__":
    main()
